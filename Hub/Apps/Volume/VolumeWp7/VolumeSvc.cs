//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 3.7.0.0
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ISimplexContract")]
public interface ISimplexContract
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimplexContract/UpdateVolume", ReplyAction="http://tempuri.org/ISimplexContract/UpdateVolumeResponse")]
    System.IAsyncResult BeginUpdateVolume(int _change, System.AsyncCallback callback, object asyncState);
    
    string EndUpdateVolume(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimplexContract/GetMaxVolume", ReplyAction="http://tempuri.org/ISimplexContract/GetMaxVolumeResponse")]
    System.IAsyncResult BeginGetMaxVolume(System.AsyncCallback callback, object asyncState);
    
    float EndGetMaxVolume(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimplexContract/GetMinVolume", ReplyAction="http://tempuri.org/ISimplexContract/GetMinVolumeResponse")]
    System.IAsyncResult BeginGetMinVolume(System.AsyncCallback callback, object asyncState);
    
    float EndGetMinVolume(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimplexContract/GetActualVolume", ReplyAction="http://tempuri.org/ISimplexContract/GetActualVolumeResponse")]
    System.IAsyncResult BeginGetActualVolume(System.AsyncCallback callback, object asyncState);
    
    float EndGetActualVolume(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ISimplexContractChannel : ISimplexContract, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class UpdateVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public UpdateVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetMaxVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetMaxVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public float Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((float)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetMinVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetMinVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public float Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((float)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetActualVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetActualVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public float Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((float)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SimplexContractClient : System.ServiceModel.ClientBase<ISimplexContract>, ISimplexContract
{
    
    private BeginOperationDelegate onBeginUpdateVolumeDelegate;
    
    private EndOperationDelegate onEndUpdateVolumeDelegate;
    
    private System.Threading.SendOrPostCallback onUpdateVolumeCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetMaxVolumeDelegate;
    
    private EndOperationDelegate onEndGetMaxVolumeDelegate;
    
    private System.Threading.SendOrPostCallback onGetMaxVolumeCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetMinVolumeDelegate;
    
    private EndOperationDelegate onEndGetMinVolumeDelegate;
    
    private System.Threading.SendOrPostCallback onGetMinVolumeCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetActualVolumeDelegate;
    
    private EndOperationDelegate onEndGetActualVolumeDelegate;
    
    private System.Threading.SendOrPostCallback onGetActualVolumeCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public SimplexContractClient()
    {
    }
    
    public SimplexContractClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public SimplexContractClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SimplexContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SimplexContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<UpdateVolumeCompletedEventArgs> UpdateVolumeCompleted;
    
    public event System.EventHandler<GetMaxVolumeCompletedEventArgs> GetMaxVolumeCompleted;
    
    public event System.EventHandler<GetMinVolumeCompletedEventArgs> GetMinVolumeCompleted;
    
    public event System.EventHandler<GetActualVolumeCompletedEventArgs> GetActualVolumeCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ISimplexContract.BeginUpdateVolume(int _change, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginUpdateVolume(_change, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string ISimplexContract.EndUpdateVolume(System.IAsyncResult result)
    {
        return base.Channel.EndUpdateVolume(result);
    }
    
    private System.IAsyncResult OnBeginUpdateVolume(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int _change = ((int)(inValues[0]));
        return ((ISimplexContract)(this)).BeginUpdateVolume(_change, callback, asyncState);
    }
    
    private object[] OnEndUpdateVolume(System.IAsyncResult result)
    {
        string retVal = ((ISimplexContract)(this)).EndUpdateVolume(result);
        return new object[] {
                retVal};
    }
    
    private void OnUpdateVolumeCompleted(object state)
    {
        if ((this.UpdateVolumeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.UpdateVolumeCompleted(this, new UpdateVolumeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void UpdateVolumeAsync(int _change)
    {
        this.UpdateVolumeAsync(_change, null);
    }
    
    public void UpdateVolumeAsync(int _change, object userState)
    {
        if ((this.onBeginUpdateVolumeDelegate == null))
        {
            this.onBeginUpdateVolumeDelegate = new BeginOperationDelegate(this.OnBeginUpdateVolume);
        }
        if ((this.onEndUpdateVolumeDelegate == null))
        {
            this.onEndUpdateVolumeDelegate = new EndOperationDelegate(this.OnEndUpdateVolume);
        }
        if ((this.onUpdateVolumeCompletedDelegate == null))
        {
            this.onUpdateVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateVolumeCompleted);
        }
        base.InvokeAsync(this.onBeginUpdateVolumeDelegate, new object[] {
                    _change}, this.onEndUpdateVolumeDelegate, this.onUpdateVolumeCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ISimplexContract.BeginGetMaxVolume(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetMaxVolume(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    float ISimplexContract.EndGetMaxVolume(System.IAsyncResult result)
    {
        return base.Channel.EndGetMaxVolume(result);
    }
    
    private System.IAsyncResult OnBeginGetMaxVolume(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ISimplexContract)(this)).BeginGetMaxVolume(callback, asyncState);
    }
    
    private object[] OnEndGetMaxVolume(System.IAsyncResult result)
    {
        float retVal = ((ISimplexContract)(this)).EndGetMaxVolume(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetMaxVolumeCompleted(object state)
    {
        if ((this.GetMaxVolumeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetMaxVolumeCompleted(this, new GetMaxVolumeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetMaxVolumeAsync()
    {
        this.GetMaxVolumeAsync(null);
    }
    
    public void GetMaxVolumeAsync(object userState)
    {
        if ((this.onBeginGetMaxVolumeDelegate == null))
        {
            this.onBeginGetMaxVolumeDelegate = new BeginOperationDelegate(this.OnBeginGetMaxVolume);
        }
        if ((this.onEndGetMaxVolumeDelegate == null))
        {
            this.onEndGetMaxVolumeDelegate = new EndOperationDelegate(this.OnEndGetMaxVolume);
        }
        if ((this.onGetMaxVolumeCompletedDelegate == null))
        {
            this.onGetMaxVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxVolumeCompleted);
        }
        base.InvokeAsync(this.onBeginGetMaxVolumeDelegate, null, this.onEndGetMaxVolumeDelegate, this.onGetMaxVolumeCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ISimplexContract.BeginGetMinVolume(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetMinVolume(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    float ISimplexContract.EndGetMinVolume(System.IAsyncResult result)
    {
        return base.Channel.EndGetMinVolume(result);
    }
    
    private System.IAsyncResult OnBeginGetMinVolume(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ISimplexContract)(this)).BeginGetMinVolume(callback, asyncState);
    }
    
    private object[] OnEndGetMinVolume(System.IAsyncResult result)
    {
        float retVal = ((ISimplexContract)(this)).EndGetMinVolume(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetMinVolumeCompleted(object state)
    {
        if ((this.GetMinVolumeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetMinVolumeCompleted(this, new GetMinVolumeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetMinVolumeAsync()
    {
        this.GetMinVolumeAsync(null);
    }
    
    public void GetMinVolumeAsync(object userState)
    {
        if ((this.onBeginGetMinVolumeDelegate == null))
        {
            this.onBeginGetMinVolumeDelegate = new BeginOperationDelegate(this.OnBeginGetMinVolume);
        }
        if ((this.onEndGetMinVolumeDelegate == null))
        {
            this.onEndGetMinVolumeDelegate = new EndOperationDelegate(this.OnEndGetMinVolume);
        }
        if ((this.onGetMinVolumeCompletedDelegate == null))
        {
            this.onGetMinVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMinVolumeCompleted);
        }
        base.InvokeAsync(this.onBeginGetMinVolumeDelegate, null, this.onEndGetMinVolumeDelegate, this.onGetMinVolumeCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ISimplexContract.BeginGetActualVolume(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetActualVolume(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    float ISimplexContract.EndGetActualVolume(System.IAsyncResult result)
    {
        return base.Channel.EndGetActualVolume(result);
    }
    
    private System.IAsyncResult OnBeginGetActualVolume(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ISimplexContract)(this)).BeginGetActualVolume(callback, asyncState);
    }
    
    private object[] OnEndGetActualVolume(System.IAsyncResult result)
    {
        float retVal = ((ISimplexContract)(this)).EndGetActualVolume(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetActualVolumeCompleted(object state)
    {
        if ((this.GetActualVolumeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetActualVolumeCompleted(this, new GetActualVolumeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetActualVolumeAsync()
    {
        this.GetActualVolumeAsync(null);
    }
    
    public void GetActualVolumeAsync(object userState)
    {
        if ((this.onBeginGetActualVolumeDelegate == null))
        {
            this.onBeginGetActualVolumeDelegate = new BeginOperationDelegate(this.OnBeginGetActualVolume);
        }
        if ((this.onEndGetActualVolumeDelegate == null))
        {
            this.onEndGetActualVolumeDelegate = new EndOperationDelegate(this.OnEndGetActualVolume);
        }
        if ((this.onGetActualVolumeCompletedDelegate == null))
        {
            this.onGetActualVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActualVolumeCompleted);
        }
        base.InvokeAsync(this.onBeginGetActualVolumeDelegate, null, this.onEndGetActualVolumeDelegate, this.onGetActualVolumeCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override ISimplexContract CreateChannel()
    {
        return new SimplexContractClientChannel(this);
    }
    
    private class SimplexContractClientChannel : ChannelBase<ISimplexContract>, ISimplexContract
    {
        
        public SimplexContractClientChannel(System.ServiceModel.ClientBase<ISimplexContract> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginUpdateVolume(int _change, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = _change;
            System.IAsyncResult _result = base.BeginInvoke("UpdateVolume", _args, callback, asyncState);
            return _result;
        }
        
        public string EndUpdateVolume(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string _result = ((string)(base.EndInvoke("UpdateVolume", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetMaxVolume(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetMaxVolume", _args, callback, asyncState);
            return _result;
        }
        
        public float EndGetMaxVolume(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            float _result = ((float)(base.EndInvoke("GetMaxVolume", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetMinVolume(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetMinVolume", _args, callback, asyncState);
            return _result;
        }
        
        public float EndGetMinVolume(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            float _result = ((float)(base.EndInvoke("GetMinVolume", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetActualVolume(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetActualVolume", _args, callback, asyncState);
            return _result;
        }
        
        public float EndGetActualVolume(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            float _result = ((float)(base.EndInvoke("GetActualVolume", _args, result)));
            return _result;
        }
    }
}
